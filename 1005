1005 继续(3n+1)猜想 (25)（25 分）

卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。

当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。

现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。

输入格式：每个测试输入包含1个测试用例，第1行给出一个正整数K(&lt100)，第2行给出K个互不相同的待验证的正整数n(1&ltn<=100)的值，数字间用空格隔开。

输出格式：每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。

输入样例：

6
3 5 6 7 8 11

输出样例：

7 6
My Code:
#include<bits/stdc++.h>
using namespace std;
int orin[105]; 
int nsign[100000];//用来标记 n数组  初始为0 标记一次为1说明有这个数 标记两次为-1 说明被覆盖 
void sign(int i)
{
	if(nsign[i]==0) nsign[i]=1;
	else if(nsign[i]==1) nsign[i]=-1;
}
void Cache_sign(int t)
{
	while(1)
	{
		if(t==1||t==0)break;
		if(t%2==0)//ou
			t=t/2;
		else//ji
			t=(3*t+1)/2;
	//	cout<<t<<" ";
		sign(t);
	}
//	cout<<endl;
}

int main()
{
	memset(nsign,0,sizeof(nsign));
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		cin>>orin[i];
		sign(orin[i]);
	}
	sort(orin,orin+n);
	for(int i=0;i<n;i++)
	{
		Cache_sign(orin[i]);
	}
	stack<int>st;
	for(int i=0;i<n;i++)
	{
		if(nsign[orin[i]] == 1)st.push(orin[i]);
	}
	while(!st.empty())
	{
		cout<<st.top();
		st.pop();
		if(!st.empty())cout<<" ";
	}
	return 0;	
}

解题思路：标记数组题，每次一开始先用原数组数据将nsign标记为1，代表原始数据，而后遍历orin将每一个中间数与nsign进行比对，若已存在就标记为-1，这样做的好处是加快了程序的运行速度，最后遍历的时候同样也是遍历orin即可，不需要数据域内整体遍历。

PS:本来是道水题，结果就因为看题不清啊！！！人家样例是3-5-8-4-2-1 ，所以应该是
    if(t%2==0)//ou
			t=t/2;
		else//ji
			t=(3*t+1)/2;
 结果理解为
 if(t%2==0)//ou
			t=t/2;
		else//ji
			t=3*t+1;
  以后看题看不明白不要开始写!!NO!NO!NO!
  
